import { PageContainer } from '@ant-design/pro-components';
import { Alert, Card, Tabs, message } from 'antd';
import React, { useEffect, useState } from 'react';
import styles from './index.less';
import {
  getCustomerClusterPoints,
  getCustomerClusterStats,
} from '@/services/ant-design-pro/analysis';
import { Pie, Scatter } from '@ant-design/plots';
import { MessageOutlined } from '@ant-design/icons';
import CommentListCollapse from '@/components/CommentListTabs';

// filter only a subset of each cluster, to smoothe frontend rendering
const CLUTSER_NUM = 6;
const CLUSTER_POINT_NUM = 500;

const CustomerClustering: React.FC = () => {
  const [customerClusterStats, setCustomerClusterStats] = useState<API.CustomerClusterStat[]>([]);
  const [customerClusterPoints, setCustomerClusterPoints] = useState<API.CustomerClusterPoint[]>(
    [],
  );

  const handleGetCustomerClusterStats = async () => {
    try {
      const result = await getCustomerClusterStats();
      setCustomerClusterStats(result);
    } catch (error) {
      message.error('Get customer cluster points failed, please try again');
    }
  };

  const handleGetCustomerClusterPoints = async () => {
    try {
      const result = await getCustomerClusterPoints();
      const clusterCounter: number[] = new Array(CLUTSER_NUM).fill(0);
      const filteredPoints = result.filter((point) => {
        const { cluster } = point;
        clusterCounter[cluster]++;
        return clusterCounter[cluster] <= CLUSTER_POINT_NUM;
      });
      setCustomerClusterPoints(filteredPoints);
    } catch (error) {
      message.error('Get customer cluster stats failed, please try again');
    }
  };

  useEffect(() => {
    handleGetCustomerClusterStats();
    handleGetCustomerClusterPoints();
  }, []);

  const clusterTabItems = customerClusterStats.map((stat) => {
    return {
      key: stat.cluster + '',
      label: `cluster #${stat.cluster + 1}`,
      children: <CommentListCollapse comments={stat.samples} />,
    };
  });

  return (
    <PageContainer>
      <Card title="Customer Clustering" className={styles.card}>
        <Scatter
          data={customerClusterPoints.map((p) => ({ ...p, cluster: `cluster #${p.cluster + 1}` }))}
          xField="x"
          yField="y"
          colorField="cluster"
          shape="circle"
          yAxis={{
            nice: true,
            line: {
              style: {
                stroke: '#aaa',
              },
            },
          }}
          xAxis={{
            min: -20,
            grid: {
              line: {
                style: {
                  stroke: '#eee',
                },
              },
            },
            line: {
              style: {
                stroke: '#aaa',
              },
            },
          }}
          interactions={[
            {
              type: 'element-active',
            },
          ]}
          state={{
            active: {
              style: {
                opacity: 0.8,
              },
            },
          }}
        />
        <br />
        <Alert
          message="Analysis"
          description={
            <p>
              Here we drew {CLUSTER_POINT_NUM} points that were the closest to the cluster center
              from each cluster.
              <br />
              The clustering is done by MiniBatchKMeans on word vectors generated by spaCy. The
              cluster number is set by elbow method experiments.
              <br />
              The word vector itself is 300-dimensioned, however for the sake of visualization, we
              used PCA to reduce the dimensionality to 2.
              <br />
              We can see that clusters #4, #5 and #6 have some overlaps. This may be caused by two
              many clusters set, or because of loss of information in the reduction of dimension.
              <br />
              This may be later further explored by comment samples from these clusters.
            </p>
          }
          type="info"
          icon={<MessageOutlined />}
          showIcon
        />
      </Card>
      <Card title="Customer Cluster Stats" className={styles.card}>
        <Pie
          data={customerClusterStats.map((c) => ({ ...c, cluster: `cluster #${c.cluster}` }))}
          angleField="count"
          colorField="cluster"
          radius={0.75}
          label={{
            type: 'spider',
            labelHeight: 28,
            content: '{name}: {percentage}\ncount: {value}',
          }}
          interactions={[
            {
              type: 'element-selected',
            },
            {
              type: 'element-active',
            },
          ]}
        />
        <Tabs
          defaultActiveKey="1"
          tabBarExtraContent={{ left: <div>Sample comments&nbsp;&nbsp;&nbsp;</div> }}
          items={clusterTabItems}
        />
        <br />
        <Alert
          message="Analysis"
          description={
            <p>
              Here we chose 10 customers that are closest to the cluster center from each cluster,
              and drew one comment sample from each customer, to see if we could spot some common
              characteristic in a cluster.
              <br />
              We may summarize the characteristics of each cluster:
              <ul>
                <li>
                  Cluster #1: The comments are polarized. The customers are very emotional: they
                  tend to either call it the best or the worst.
                </li>
                <li>
                  Cluster #2: It seems to me that this cluster focuses more on dramatic level, like
                  plot and deep meaning, instead of visual wonder.
                </li>
                <li>
                  Cluster #3: They follow blockkbusters, whether it&apos;s TV or movie.
                  Recommendation on latest trend on them would make no mistake.
                </li>
                <li>Cluster #4: As opposed to the last cluster, they dig in for classics.</li>
                <li>
                  Cluster #5: They concentrate on family friendly movies/shows, like cartoons, PG
                  rated films, etc. Perhaps they have kids, or are teachers.
                </li>
                <li>Cluster #6: These customers purchase more adult-oriented movies/shows.</li>
              </ul>
              However, the differences between the last 2 clusters are not so distinct. Combined
              with the fact that those clusters have relatively fewer members, it may be worth
              trying to combine those 2 clusters.
            </p>
          }
          type="info"
          icon={<MessageOutlined />}
          showIcon
        />
      </Card>

      <br />
      <div className={styles.footer}>
        sentiment analysis powered by{' '}
        <a href="https://spacy.io/universe/project/spacy-textblob" rel="noreferrer" target="_blank">
          textblob on spaCy
        </a>
        <br />
        visualization powered by{' '}
        <a href="https://charts.ant.design/" rel="noreferrer" target="_blank">
          Ant Design Charts
        </a>
      </div>
    </PageContainer>
  );
};
export default CustomerClustering;
